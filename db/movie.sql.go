// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: movie.sql

package db

import (
	"context"
	"database/sql"
)

const createMovie = `-- name: CreateMovie :execresult
INSERT INTO movies (
        id,
        title,
        backdrop_path,
        poster_path,
        vote_average
    )
VALUES (?, ?, ?, ?, ?)
`

type CreateMovieParams struct {
	ID           int     `json:"id"`
	Title        string  `json:"title"`
	BackdropPath string  `json:"backdrop_path"`
	PosterPath   string  `json:"poster_path"`
	VoteAverage  float64 `json:"vote_average"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMovie,
		arg.ID,
		arg.Title,
		arg.BackdropPath,
		arg.PosterPath,
		arg.VoteAverage,
	)
}

const getMovie = `-- name: GetMovie :one
SELECT id, title, poster_path, backdrop_path, vote_average, created_at
FROM movies
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetMovie(ctx context.Context, id int) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PosterPath,
		&i.BackdropPath,
		&i.VoteAverage,
		&i.CreatedAt,
	)
	return i, err
}
