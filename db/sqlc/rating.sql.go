// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rating.sql

package db

import (
	"context"
	"database/sql"
)

const createRating = `-- name: CreateRating :execresult
INSERT INTO ratings (username, movie_id, rating)
VALUES (?, ?, ?)
`

type CreateRatingParams struct {
	Username string `json:"username"`
	MovieID  int    `json:"movie_id"`
	Rating   int    `json:"rating"`
}

func (q *Queries) CreateRating(ctx context.Context, arg CreateRatingParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRating, arg.Username, arg.MovieID, arg.Rating)
}

const getRating = `-- name: GetRating :one
SELECT id, username, movie_id, rating, created_at
FROM ratings
WHERE username = ?
  AND movie_id = ?
`

type GetRatingParams struct {
	Username string `json:"username"`
	MovieID  int    `json:"movie_id"`
}

func (q *Queries) GetRating(ctx context.Context, arg GetRatingParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, getRating, arg.Username, arg.MovieID)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.MovieID,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const getRatings = `-- name: GetRatings :many
SELECT id, username, movie_id, rating, created_at
FROM ratings
WHERE username = ?
`

func (q *Queries) GetRatings(ctx context.Context, username string) ([]Rating, error) {
	rows, err := q.db.QueryContext(ctx, getRatings, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rating{}
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.MovieID,
			&i.Rating,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRatings = `-- name: ListRatings :many
SELECT id, username, movie_id, rating, created_at
FROM ratings
`

func (q *Queries) ListRatings(ctx context.Context) ([]Rating, error) {
	rows, err := q.db.QueryContext(ctx, listRatings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rating{}
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.MovieID,
			&i.Rating,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRating = `-- name: UpdateRating :execresult
UPDATE ratings
SET rating = ?
WHERE username = ?
  AND movie_id = ?
`

type UpdateRatingParams struct {
	Rating   int    `json:"rating"`
	Username string `json:"username"`
	MovieID  int    `json:"movie_id"`
}

func (q *Queries) UpdateRating(ctx context.Context, arg UpdateRatingParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateRating, arg.Rating, arg.Username, arg.MovieID)
}
